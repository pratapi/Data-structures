// sorting 
#include <iostream>
#include <vector>
#include <string>
#include <sstream>
using namespace std;

// 1. selection sort
void SelectionSort(vector<int> & A, int size)
{
   for(int i = 0; i< size-1 ; i++)
   {
	   int imin =i;
	   for(int j=i; j<size; j++)
	   {
		   if(A[j] < A[i]) imin = j;
	   }
	   int tmp = A[i];
	   A[i] = A[imin];
	   A[imin] = tmp;
   }
}

// 2. Bubble Sort
void BubbleSort(vector< int> & A, int size)
{
	for(int i = 0; i < size; i++)
	{
		int flag = 0;
		for(int j=0; j< (size-1)-i; j++)
		{
			if(A[j] > A[j+1])
			{
				int tmp = A[j];
				A[j] = A[j+1];
				A[j+1] = tmp;
				flag =1;
			}
		}
		if(flag == 0) break;
	}
}

// 3. Insertion Sort
void InsertionSort(vector< int> & A, int size)
{
	 for(int i =0; i< size; i++)
	 {
		 int value = A[i];
		 int hole = i;
		 while(hole>0 && A[hole-1] > value)
		 {
			 A[hole] = A[hole-1];
			 hole = hole-1;
		 }
		 A[hole] = value;
	 }
}

// 4. Merge Sort
void Merge(vector< int > &L, vector< int> &R,vector< int> &A)
{
	int nL = L.size();
	int nR = R.size();
	int nA = A.size();
	int i =0, j =0, k =0;
	while(i < nL && j < nR)
	{
		if(L[i] <= R[j])
		{
			A[k] = L[i];
			i++;
		}else
		{
			A[k] = R[j];
			j++;
		}
		k++;
	}

	while(i < nL)
	{ 
		A[k] = L[i]; i++; k++;
	}

	while(j < nR)
	{
		A[k] = R[j]; j++; k++;
	}
}


void MergeSort(vector< int > &A, int size)
{
	if(size < 2) return;
	int mid = size/2;
	vector< int> L;
	vector< int> R;
	
	for(int i=0; i< mid; i++)
		L.push_back(A[i]);

	for(int i=0; i< size-mid; i++)
		R.push_back(A[mid+i]);
	MergeSort(L,L.size());
	MergeSort(R,R.size());
	Merge(L,R,A);
}

// 5. Quick sort
int partition(vector< int> &A, int nS, int nE)
{
   int pivot = A[nE];
   int pIndx = nS;
   for(int i=nS; i< nE; i++)
   {
	   if(A[i] <=pivot)
	   {
		   swap(A[i],A[pIndx]);
		   pIndx++;
	   }
   }
   swap(A[pIndx], A[nE]);
   return pIndx;
}
void Quicksort(vector< int> & A, int nS, int nE)
{
	if(nS < nE)
	{
		int nPivot = partition(A, nS, nE);
		Quicksort(A, nS, nPivot-1);
		Quicksort(A, nPivot+1, nE);
	}
}
// Driver Program
int main(int argc, char** argv)
{
	vector<int> A;
	string line;
	int no = 0;
	printf("Please input the array for sorting \n");

	getline(cin, line);
	istringstream stream(line);
	while(stream >> no)
		A.push_back(no);
	
	int size = A.size();
	printf("Choose type of sorting alogrithim \n");
	printf("1. Selection Sort \n");
	printf("2. Bubble Sort \n");
	printf("3. Insertion Sort \n");
	printf("4. Merge Sort \n");
	printf("5. Quick Sort \n");
	int choice = 0;
	scanf_s("%d",&choice);
	switch (choice)
	{
	case 1: 
		printf("Selection Sort: \n");
		SelectionSort(A,size);
		break;
	case 2:
	    printf("Bubble Sort: \n");
		BubbleSort(A,size);
		break;
	case 3:
		printf("Insertion Sort: \n");
		InsertionSort(A,size);
		break;
	case 4:
		printf("4. Merge Sort:  \n");
		MergeSort(A,size);
		break;
	case 5:
		printf("5. Quick Sort: \n");
		Quicksort(A,0,size-1);
		break;
	}

    // Display sorted array
	for(int i =0; i<size; i++)
	{
		int tmp = A[i];
		printf("  %d", tmp);
	}

	return 0;
}
