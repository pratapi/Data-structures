// BST
#include <iostream>
using namespace std;

struct Node {

	int data;
	Node * left;
	Node * right;
};

Node * GetNewNode(int data)
{
	Node *newNode = new Node();
	newNode->data = data;
	newNode->left = NULL;
	newNode->right = NULL;
	return newNode;
}

Node * Insert(Node * root, int data)
{
	if(root ==NULL) {
		root = GetNewNode(data);
	}
	else if((root->data) >= data)
	{
		root->left = Insert(root->left,data);
	}
	else{
		root->right = Insert(root->right,data);
	}
	return root;
}

// Searching 
bool Sarch(Node * root, int data)
{
	if(root == NULL) return false;
	else if(root->data == data) return true;
	else if(root->data >= data) return Sarch(root->left,data); 
	else return Sarch(root->right, data);
}

// Min node in BST
int FindMin(Node * root)
{
	if(root == NULL) return -1;
	while (root->left != NULL)
	{
		root = root->left;
	}
		return root->data;
}

// find max node in BST
int FindMax(Node * root)
{
	if(root == NULL) return -1;
	while (root->right != NULL)
	{
		root = root->right;
	}
		return root->data;
}

int main()
{
  	Node * Bstroot = NULL;
	Bstroot = Insert(Bstroot,15);
	Bstroot = Insert(Bstroot, 10);
	Bstroot = Insert(Bstroot,20);
	Bstroot = Insert(Bstroot,25);
	Bstroot = Insert(Bstroot,8);
	Bstroot = Insert(Bstroot,12);

	int x;
	printf("Enter number be searched \n");
	scanf_s("%d", &x);
	if(Sarch(Bstroot,x) == true) printf("Found \n");
	else printf("Not Found \n");

	int a =FindMax(Bstroot);
	int b =FindMin(Bstroot);
	printf("Min Value: %d \n",a);
	printf("Max Value: %d \n",b);
	return 0;
}
