// Graph
// c++ program to demostrate adjacency list reprentation of graphs

#include <iostream>
using namespace std;

// A structure to represent an adjacency list node
struct AdjListNode
{
	int v;
	AdjListNode* next;
};

AdjListNode * newAdjListNode(int v)
{
	AdjListNode * newNode = new AdjListNode();
	newNode->v = v;
	newNode->next = NULL;
	return  newNode;
}

// A structure to represent an adjacency list
struct AdjList
{
	AdjListNode * head;
};

// A structure to represent a graph.A Graph is an array of adjaceny lists
// Size of array will be |V| = no of vertices
struct Graph
{
	int V;
	AdjList * array;
};

Graph * CreateGraph(const int & V)
{
	Graph * graph = new Graph();
	graph->V = V;

	// create an array of adjacency list. Size of array will be v
	graph->array = new AdjList();

	// initalize each adjacency list as empty by making head as NULL
	for(int i=0; i<V; i++)
	{
		(&graph->array[i])->head = NULL;
	}

	return graph;
}

// Adds an edge to an undirected graph
void addEdge(Graph* graph,int u,int v)
{
	// add an edge from u to v. A new node is added to the adjacecny list of u
	// the node is added in the begining
	AdjListNode * newNode = newAdjListNode(v);
	newNode->next = (&graph->array[u])->head;
	(&graph->array[u])->head = newNode;

	 // Since graph is undirected, add an edge from dest to src also
    newNode = newAdjListNode(u);
    newNode->next = (&graph->array[v])->head;
    (&graph->array[v])->head = newNode;
}

// A utility function to print the adjacenncy list representation of graph
void printGraph(struct Graph* graph)
{
    int v;
    for (v = 0; v < graph->V; ++v)
    {
        struct AdjListNode* pCrawl = graph->array[v].head;
        printf("\n Adjacency list of vertex %d\n head ", v);
        while (pCrawl)
        {
            printf("-> %d", pCrawl->v);
            pCrawl = pCrawl->next;
        }
        printf("\n");
    }
}



int main()
{
	int v = 5;
	Graph * graph = CreateGraph(v);

	// Add edges b\t vertices
	addEdge(graph, 0, 1);
    addEdge(graph, 0, 4);
    addEdge(graph, 1, 2);
    addEdge(graph, 1, 3);
    addEdge(graph, 1, 4);
    addEdge(graph, 2, 3);
    addEdge(graph, 3, 4);

	 // print the adjacency list representation of the above graph
    printGraph(graph);

	return 0;
}
