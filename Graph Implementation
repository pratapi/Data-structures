// Unidirected Graph implementation : Adjacency List

#include <iostream>
using namespace std;

// A structure to represent an adjacency list node
struct Node
{
	int v;
	Node * next;
};

// List of Head ptr's to each linked list 
struct HeadPtrList 
{
	Node * head;
};

struct Graph
{
	int nV;  // no of vertices
	HeadPtrList * listofHeadptr; // ptr to head ptr's list
};

// creating new node or adjacent edge
Node * CreateNode(const int & v )
{
	Node * newNode = new Node();
	newNode->v = v;
	newNode->next = NULL;

	return newNode;
}

// initializing graph
Graph * CreateGraph(const int & nv)
{
	Graph * graph = new Graph();
	graph->nV = nv;		// setting number of vertices

	graph->listofHeadptr = new HeadPtrList[nv]; // creating head ptr's list with no. of vertices

	for(int i =0; i < nv; i++)
		graph->listofHeadptr[i].head = NULL; // setting first whole list to NULL

	return graph;
}

// adding edge for undirected graph
void addEdge(Graph * graph, int u, int v)
{
	// Check for duplicacy
	Node * chkEdge = graph->listofHeadptr[u].head;
	while(chkEdge)
	{
		if(chkEdge->v == v) 
		{
			return; 
		} // duplicate Edge found
		else { chkEdge = chkEdge->next;}
	}

	// undirected graph firest create from u->v then v->u
	Node * newEdge_u = CreateNode(v);
	newEdge_u->next = graph->listofHeadptr[u].head;
	graph->listofHeadptr[u].head = newEdge_u;

	Node * newEdge_v = CreateNode(u);
	newEdge_v->next = graph->listofHeadptr[v].head;
	graph->listofHeadptr[v].head = newEdge_v;
}

// Utility function to print array of adjacency list
void Print(const Graph * graph)
{
	for(int u=0; u < graph->nV ; u++)
	{
		Node * iHead = graph->listofHeadptr[u].head;
		printf("\n Adjacency list of vertex %d\n head ", u);
		while(iHead)
		{
			printf("-> %d", iHead->v);
			iHead = iHead->next;
		}
		printf("\n");
	}
}

// Driver's Program
int main()
{
	int V;
	printf("Enter the number of vertices for Graph G \n");
	scanf_s("%d", &V);
	Graph * graph = CreateGraph(V);

	int E=0,u=-1,v=-1;
	printf("Enter the number of Edges \n");
	scanf_s("%d", &E);
	printf("Enter the Edges in form of u v \n");
	while(E--)
	{
		scanf_s("%d %d", &u, &v);
		addEdge(graph, u, v);
	}

	// Print Graph
	Print(graph);

	return 0;
}
